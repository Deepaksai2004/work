import json
import numpy as np
import cv2
import os
from pycocotools import mask as maskUtils

# ==== CONFIGURATION ====
coco_json_path = '/content/result.json'      # replace with your COCO export path
output_mask_dir = 'output_masks'   # replace with your desired output folder
mask_color = 255                             # value to fill mask (255 for white mask)

# ========================

os.makedirs(output_mask_dir, exist_ok=True)

with open(coco_json_path) as f:
    coco_data = json.load(f)

# Create category_id to name mapping for debugging if needed
cat_map = {cat['id']: cat['name'] for cat in coco_data['categories']}

# Prepare image ID to filename mapping
id_to_filename = {img['id']: img['file_name'] for img in coco_data['images']}

# Group annotations by image
from collections import defaultdict
img_to_anns = defaultdict(list)
for ann in coco_data['annotations']:
    img_to_anns[ann['image_id']].append(ann)

for img in coco_data['images']:
    img_id = img['id']
    img_name = img['file_name']
    height = img['height']
    width = img['width']

    mask = np.zeros((height, width), dtype=np.uint8)

    anns = img_to_anns[img_id]
    for ann in anns:
        segmentation = ann['segmentation']

        if isinstance(segmentation, list):
            # Polygon
            pts = [np.array(seg, dtype=np.int32).reshape(-1, 2) for seg in segmentation]
            cv2.fillPoly(mask, pts, mask_color)
        elif isinstance(segmentation, dict) and 'counts' in segmentation:
            # RLE
            rle = ann['segmentation']
            m = maskUtils.decode(rle)
            mask[m == 1] = mask_color

    mask_output_path = os.path.join(output_mask_dir, os.path.splitext(img_name)[0] + '_mask.png')
    cv2.imwrite(mask_output_path, mask)
    print(f"Saved mask: {mask_output_path}")

print("âœ… All masks generated.")
